spring.datasource.url=jdbc:mysql://mywallet.cu2iydrj9wq8.eu-north-1.rds.amazonaws.com:3306/mobile_wallet
spring.datasource.username=mobileWallet
spring.datasource.password=12345Six
server.port=8000
spring.application.name=mobile-wallet-user
# logging.level.root=DEBUG

# need for google kubernetes
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# need for KAFKA
spring.kafka.bootstrap-servers=localhost:9092

# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.IntegerDeserializer
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# need for confluent cloud
# spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Required connection configs for Kafka producer, consumer, and admin
# spring.kafka.properties.sasl.mechanism=PLAIN
# spring.kafka.properties.bootstrap.servers=pkc-6ojv2.us-west4.gcp.confluent.cloud:9092
# spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='F6DFHET42CC3RI5P' password='ehQwLZyF0mUqwGUdd20Q4dL/Wfr/MqIYg0SoLP6REDiNpU2y7PhQqvhMVHK10PcY';
# spring.kafka.properties.security.protocol=SASL_SSL

# spring.kafka.properties.schema.registry.url: https://psrc-j98yq.us-central1.gcp.confluent.cloud
# spring.kafka.properties.schema.basic.auth.credentials.source=USER_INFO
# spring.kafka.properties.schema.basic.auth.user.info=RXVPOV2DUDU4JB54:jV6f/EsNfw25qhl3Y2YWt3cyY7nk3zVlSOwdgOV61wecHhlA4cOJIEoHZ5RZExgY

# logging.level.root=DEBUG


# spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# spring.kafka.consumer.properties.spring.json.trusted.packages=*



# need for white label error
# server.error.whitelabel.enabled=false
# server.error.path=/error


# spring.kafka.properties.schema.registry.url: https://psrc-j98yq.us-central1.gcp.confluent.cloud

# spring:
#   kafka:
#     bootstrap-servers: confluent-cloud-broker-url:9092
#     properties:
#       schema:
#         registry:
#           url: schema-registry-url
#       basic:
#         auth:
#           credentials:
#             source: USER_INFO
#           user:
#             info: SCHEMA_REGISTRY_API_KEY:SCHEMA_REGISTRY_SECRET
#       sasl:
#         jaas:
#           config: org.apache.kafka.common.security.plain.PlainLoginModule
#             required username="KAFKA_API_KEY" password="KAFKA_SCHEMA_REGISTRY";
#         mechanism: PLAIN
#       security:
#         protocol: SASL_SSL
#       ssl:
#         endpoint:
#           identification:
#             algorithm: https
#     consumer:
#       autoOffsetReset: earliest
#       group-id: spring-boot-avro-consumer-id
#       keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
#       properties:
#         specific:
#           avro:
#             reader: true
#       valueDeserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#     producer:
#       keySerializer: org.apache.kafka.common.serialization.StringSerializer
#       valueSerializer: io.confluent.kafka.serializers.KafkaAvroSerializer